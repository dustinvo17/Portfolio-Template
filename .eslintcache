[{"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\index.js":"1","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\App.js":"2","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\pages\\HomePage.js":"3","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\pages\\Contact.js":"4","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\pages\\Projects.js":"5","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Header.js":"6","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Banner.js":"7","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Introduction.js":"8","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\data\\data.js":"9","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\ProjectList.js":"10","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\SectionTitle.js":"11","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\ContentHeader.js":"12","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\ContactForm.js":"13","C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Footer.js":"14"},{"size":909,"mtime":1608453438807,"results":"15","hashOfConfig":"16"},{"size":761,"mtime":1608611018623,"results":"17","hashOfConfig":"16"},{"size":374,"mtime":1608578477248,"results":"18","hashOfConfig":"16"},{"size":165,"mtime":1608591239177,"results":"19","hashOfConfig":"16"},{"size":201,"mtime":1608533700489,"results":"20","hashOfConfig":"16"},{"size":1635,"mtime":1608592495293,"results":"21","hashOfConfig":"16"},{"size":5887,"mtime":1608592191449,"results":"22","hashOfConfig":"16"},{"size":1789,"mtime":1608592240728,"results":"23","hashOfConfig":"16"},{"size":5873,"mtime":1608711152713,"results":"24","hashOfConfig":"16"},{"size":7277,"mtime":1608594768966,"results":"25","hashOfConfig":"16"},{"size":535,"mtime":1608518374043,"results":"26","hashOfConfig":"16"},{"size":1074,"mtime":1608579356000,"results":"27","hashOfConfig":"16"},{"size":5145,"mtime":1608612020911,"results":"28","hashOfConfig":"16"},{"size":633,"mtime":1608611499487,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1um12d0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\index.js",[],["65","66"],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\App.js",[],["67","68"],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\pages\\HomePage.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\pages\\Contact.js",[],["69","70"],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\pages\\Projects.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Header.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Banner.js",["71"],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from 'react-router-dom'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Avatar,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n\r\n} from \"@material-ui/core\"\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\"\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\"\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { LINKS } from \"../data/data\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  boxBanner: {\r\n    [theme.breakpoints.between(0,900)]: {\r\n      textAlign: \"center\",\r\n      padding: \"30px 5px\",\r\n    },\r\n    display:'flex',\r\n    justifyContent:'center',\r\n    alignItems:'center',\r\n    padding: theme.spacing(3),\r\n    marginTop: theme.spacing(4),\r\n    marginBottom: theme.spacing(5),\r\n    minHeight:'300px',\r\n  },\r\n  large: {\r\n    width: \"240px\",\r\n    height: \"240px\",\r\n  },\r\n  cardIntroduction: {},\r\n  textContent: {\r\n    lineHeight: 2.5,\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  icon: {\r\n    cursor: \"pointer\",\r\n    fontSize: 45,\r\n  },\r\n  cardContent: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  gridItemBreak: {\r\n    \r\n    [theme.breakpoints.between(0,900)]: {\r\n      order: 1,\r\n      marginTop: \"20px\",\r\n    },\r\n  },\r\n  iconContainers: {\r\n    [theme.breakpoints.between(0,900)]: {\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n  buttonContainer: {\r\n    [theme.breakpoints.between(0,900)]: {\r\n      justifyContent: \"center\",\r\n    }\r\n    \r\n  },\r\n  avatarGrid :{\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width:'100%',\r\n    alignItems: \"flex-start\",\r\n  }\r\n}));\r\n\r\nexport default function Banner() {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescripton] = useState(\"\");\r\n  const location = useLocation();\r\n  useEffect(() => {\r\n    const {pathname} = location\r\n    if (pathname.includes(\"contact\")) {\r\n      setTitle(\"Contact Me\");\r\n      setDescripton(\"Wanna hire or collaborate with me? Let's talk!\");\r\n    }\r\n    if (pathname.includes(\"projects\")) {\r\n      setTitle(\"Projects\");\r\n      setDescripton(\"What kind of cool stuffs have I built? Check out below!\");\r\n    } else {\r\n    }\r\n  }, [location]);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const renderSubPage = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          textAlign: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h4\" color=\"primary\">\r\n          {title}\r\n        </Typography>\r\n        <Divider className={classes.divider} variant=\"middle\" />\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          {description}\r\n        </Typography>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box boxShadow={4} color=\"text.primary\"  className={classes.boxBanner}>\r\n      {location.pathname.includes(\"contact\") ||\r\n      location.pathname.includes(\"projects\") ? (\r\n        renderSubPage()\r\n      ) : (\r\n        <React.Fragment>\r\n          <Grid\r\n        \r\n            container\r\n           \r\n          >\r\n            <Grid sm={12} md={8} lg={8} item className={classes.gridItemBreak}>\r\n              <Card className={classes.cardIntroduction} elevation={0}>\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography variant=\"h5\" color=\"primary\">\r\n                    Hello There! I'm\r\n                    <b style={{ marginLeft: \"10px\" }}>Dat Vo</b>\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    component=\"p\"\r\n                    color=\"textSecondary\"\r\n                    className={classes.textContent}\r\n                  >\r\n                    Result-driven Software Engineer with strong knowledge of\r\n                    Computer Science, and 3 years of experience in Programming /\r\n                    Full Stack Development. I strongly believe that utilizing\r\n                    tech is the best way to deliver great social impact.\r\n                  </Typography>\r\n                  <div\r\n                    className={classes.iconContainers}\r\n                    style={{ display: \"flex\", alignItems: \"center\" }}\r\n                  >\r\n                    <GitHubIcon\r\n                      onClick={() => window.open(LINKS.GITHUB)}\r\n                      style={{ marginRight: \"30px\" }}\r\n                      className={classes.icon}\r\n                    />\r\n                    <LinkedInIcon\r\n                      onClick={() => window.open(LINKS.LINKEDIN)}\r\n                      className={classes.icon}\r\n                    />\r\n                  </div>\r\n                </CardContent>\r\n                <CardActions\r\n                  className={classes.buttonContainer}\r\n                  style={{ marginLeft: \"8px\" }}\r\n                >\r\n                  <Button\r\n                    onClick={() => window.open(LINKS.RESUME)}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                  >\r\n                    Resume\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n            <Grid \r\n              sm={12}\r\n              md={4}\r\n              lg={4}\r\n              item\r\n              className={classes.avatarGrid}\r\n\r\n            >\r\n              <Box boxShadow={12} clone>\r\n                <Avatar\r\n                  elevation={5}\r\n                  alt=\"Dat Vo Tech Avatar\"\r\n                  src=\"/images/avatar.png\"\r\n                  className={classes.large}\r\n                />\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n",["72","73"],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Introduction.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\data\\data.js",["74"],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\ProjectList.js",["75","76","77","78"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport {\r\n  AppBar,\r\n  Tabs,\r\n  Tab,\r\n  type,\r\n  Grid,\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  Paper,\r\n  Button,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport YouTubeIcon from \"@material-ui/icons/YouTube\"\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\"\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { PROJECT_TYPE } from \"../data/data\";\r\nimport SectionTitle from \"./SectionTitle\";\r\nimport { PROJECTS_DATA } from \"../data/data\";\r\nimport ContentHeader from \"./ContentHeader\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  projectBox: {\r\n    paddingTop: theme.spacing(7),\r\n    paddingBottom: theme.spacing(7),\r\n    \"&:last-child\": {\r\n      paddingBottom:0\r\n    },\r\n    [theme.breakpoints.between(0, 900)]: {\r\n      textAlign: \"center\",\r\n      paddingTop: theme.spacing(5),\r\n      paddingBottom: theme.spacing(5),\r\n    },\r\n  },\r\n  projectGridContainer: {\r\n    justifyContent: \"center\",\r\n  },\r\n  paperGridItem: {\r\n    padding: \"20px  15px 20px 15px\",\r\n  },\r\n  projectButton: {\r\n    margin: \"10px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  buttonsContainer: {\r\n    display: \"flex\",\r\n    marginTop: \"20px\",\r\n    flexWrap: \"wrap\",\r\n    [theme.breakpoints.between(0, 900)]: {\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n  icon: {\r\n    marginLeft: \"5px\",\r\n  },\r\n  gridOrder: {\r\n    [theme.breakpoints.between(0, 900)]: {\r\n      order: \"0!important\",\r\n    },\r\n  },\r\n  textListAlign: {\r\n    [theme.breakpoints.between(0, 900)]: {\r\n      textAlign: \"center!important\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n  const { value } = props;\r\n  const classes = useStyles();\r\n\r\n  const matches = useMediaQuery(\"(max-width:900px)\");\r\n  let projects;\r\n  switch (value) {\r\n    case 1:\r\n      projects = PROJECTS_DATA.filter(\r\n        (project) => project.type === PROJECT_TYPE.FRONT_END\r\n      );\r\n      break;\r\n    case 2:\r\n      projects = PROJECTS_DATA.filter(\r\n        (project) => project.type === PROJECT_TYPE.FULL_STACK\r\n      );\r\n      break;\r\n    case 3:\r\n      projects = PROJECTS_DATA.filter(\r\n        (project) => project.type === PROJECT_TYPE.DESKTOP\r\n      );\r\n      break;\r\n    default:\r\n      projects = [...PROJECTS_DATA];\r\n  }\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      id={`full-width-tabpanel-${value}`}\r\n      aria-labelledby={`full-width-tab-${value}`}\r\n    >\r\n      {projects.map((p, index) => {\r\n        return (\r\n          <Box key={index} className={classes.projectBox}>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              spacing={4}\r\n              className={classes.projectGridContainer}\r\n            >\r\n              <Grid\r\n                item\r\n                sm={12}\r\n                md={7}\r\n                lg={7}\r\n                style={{ order: index % 2 === 0 ? 0 : 2 }}\r\n                className={classes.gridOrder}\r\n              >\r\n                <img alt={p.image} src={p.image} style={{ width: \"100%\" }} />\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                sm={12}\r\n                md={5}\r\n                lg={5}\r\n                style={{ order: 1 }}\r\n                className={classes.gridOrder}\r\n              >\r\n                <Box className={classes.paperGridItem} boxShadow={3}>\r\n                  <ContentHeader title={p.name} description={p.description} />\r\n\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    Key Features:{\" \"}\r\n                  </Typography>\r\n                  <List dense={false}>\r\n                    {p.tech.map((point) => {\r\n                      return (\r\n                        <ListItem\r\n                          key={point}\r\n                          alignItems=\"center\"\r\n                          className={classes.textListAlign}\r\n                        >\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            color=\"textSecondary\"\r\n                            style={{\r\n                              display: \"block\",\r\n                              lineHeight: 2,\r\n                              wordWrap: \"break-word\",\r\n                              width: \"100%\",\r\n                            }}\r\n                          >\r\n                            {matches ? \"\" : \"-\"} {point}\r\n                          </Typography>\r\n                        </ListItem>\r\n                      )\r\n                    })}\r\n                  </List>\r\n                  <div className={classes.buttonsContainer}>\r\n                    {p.site ? (\r\n                      <Button\r\n                        size=\"small\"\r\n                        className={classes.projectButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => window.open(p.site)}\r\n                      >\r\n                        Visit Site <VisibilityIcon className={classes.icon}  />\r\n                      </Button>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {p.video ? (\r\n                      <Button\r\n                        size=\"small\"\r\n                        className={classes.projectButton}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => window.open(p.video)}\r\n                      >\r\n                        Demo <YouTubeIcon className={classes.icon} />\r\n                      </Button>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    <Button\r\n                      size=\"small\"\r\n                      className={classes.projectButton}\r\n                      variant=\"contained\"\r\n                      onClick={() => window.open(p.source)}\r\n                    >\r\n                      Code <GitHubIcon className={classes.icon} />\r\n                    </Button>\r\n                  </div>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function ProjectList() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  return (\r\n    <div>\r\n      <SectionTitle title=\"My Latest Work\" />\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          orientation={matches ? \"vertical\" : \"horizontal\"}\r\n          variant=\"fullWidth\"\r\n          centered\r\n        >\r\n          <Tab label=\"All\" />\r\n          <Tab label={PROJECT_TYPE.FRONT_END} />\r\n          <Tab label={PROJECT_TYPE.FULL_STACK} />\r\n          <Tab label={PROJECT_TYPE.DESKTOP} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0} />\r\n    </div>\r\n  );\r\n}\r\n",["79","80"],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\SectionTitle.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\ContentHeader.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\ContactForm.js",[],"C:\\Users\\datvo\\Desktop\\datvo-portfolio\\src\\components\\Footer.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"85"},{"ruleId":"83","replacedBy":"86"},{"ruleId":"81","replacedBy":"87"},{"ruleId":"83","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":98,"column":9,"nodeType":"91","messageId":"92","endLine":98,"endColumn":14},{"ruleId":"81","replacedBy":"93"},{"ruleId":"83","replacedBy":"94"},{"ruleId":"89","severity":1,"message":"95","line":102,"column":7,"nodeType":"91","messageId":"92","endLine":102,"endColumn":12},{"ruleId":"89","severity":1,"message":"96","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":17},{"ruleId":"89","severity":1,"message":"97","line":9,"column":3,"nodeType":"91","messageId":"92","endLine":9,"endColumn":7},{"ruleId":"89","severity":1,"message":"98","line":14,"column":3,"nodeType":"91","messageId":"92","endLine":14,"endColumn":8},{"ruleId":"89","severity":1,"message":"99","line":214,"column":9,"nodeType":"91","messageId":"92","endLine":214,"endColumn":16},{"ruleId":"81","replacedBy":"100"},{"ruleId":"83","replacedBy":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],["102"],["103"],["102"],["103"],"no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar",["102"],["103"],"'Intro' is defined but never used.","'PropTypes' is defined but never used.","'type' is defined but never used.","'Paper' is defined but never used.","'classes' is assigned a value but never used.",["102"],["103"],"no-global-assign","no-unsafe-negation"]